
You can think of a test as being broken down into four steps:

Arrange

Act

Assert

Cleanup

Arrange is where we prepare everything for our test. This means pretty much everything except for the “act”. It’s lining up the dominoes so that the act can do its thing in one, state-changing step. This can mean preparing objects, starting/killing services, entering records into a database, or even things like defining a URL to query, generating some credentials for a user that doesn’t exist yet, or just waiting for some process to finish.

Act is the singular, state-changing action that kicks off the behavior we want to test. This behavior is what carries out the changing of the state of the system under test (SUT), and it’s the resulting changed state that we can look at to make a judgement about the behavior. This typically takes the form of a function/method call.

Assert is where we look at that resulting state and check if it looks how we’d expect after the dust has settled. It’s where we gather evidence to say the behavior does or does not aligns with what we expect. The assert in our test is where we take that measurement/observation and apply our judgement to it. If something should be green, we’d say assert thing == "green".

Cleanup is where the test picks up after itself, so other tests aren’t being accidentally influenced by it.

At its core, the test is ultimately the act and assert steps, with the arrange step only providing the context. Behavior exists between act and assert.


py.test    -> runs all pytests in the directory

pytest -v -s 

-v verbose
-s show all cosole logs

pytest -k

-k --> keyword match (test parse)

pip --> package installer for Python

platform darwin -- Python 3.11.4, pytest-7.4.0, pluggy-1.2.0
rootdir: /Users/muralikrishnan/Desktop/murali/python_selenium/my_test
collected 6 items

here pluggy is a hook for calling pytest.

python -m pytest -v -s

-v: verbose
-s: prints all print statement in our tests

pytest -rA

pytest -rA -v

We can configure different naming conventions by setting the python_files, python_classes, python_functions in our configuration file.


****
https://docs.pytest.org/en/7.1.x/example/pythoncollection.html
****

pytest allows to use our standard python asserts

AssertionError is bulit-in exception that inherits the Exception class

is --> A reserved word that test, if two variables points to the same object, similar to java == which checks if both objects point to the same memory location

== --> does value comparison, similiar to java str.equals() method

Hard assert vs Soft assert
--------------------------

Hard assert stops exection after a failure and moves to next annotation
	--> Its best to use hard assertion, if there is only one result to verify in the test function

Soft assert continues exection after a failure adn moves to the next statement line.
	--> If there's more than one result to verify in the same test function, its best to use soft assertion.

https://pypi.org/project/softest/

pip install softest

Pytest MARKERS

pytest --markers.  --> lists all bulitin pytest markers

@pytest.mark.filterwarnings
@pytest.mark.skip(reason=None)
@pytest.mark.skipif(condition, ..., *, reason=...)
@pytest.mark.xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict)
@pytest.mark.parametrize(argnames, argvalues)
@pytest.mark.usefixtures(fixturename1, fixturename2, ...)
@pytest.mark.tryfirst: mark a hook implementation function such that the plugin machinery will try to call it first/as early as possible. DEPRECATED, use @pytest.hookimpl(tryfirst=True) instead.

@pytest.mark.trylast: mark a hook implementation function such that the plugin machinery will try to call it last/as late as possible. DEPRECATED, use @pytest.hookimpl(trylast=True) instead.

we can use custom markers as well. like @pytest.mark.smoke

pytest -m "smoke" -rA -v

-m: marker
-rA: report all

when we use custom markers, we get warnings to register them first. To disbale them, we can use --disable-warnings option 

pytest -m "smoke" -rA -v --disable-warnings

We need to register our custom markers in pytest.ini file to not get those warnings,
pytest.ini is a configuration file that we place in the root directory

[pytest]
markers = 
    smoke: Smoke Test
    regression: Regression Test
    sanity: Sanity Test
    blocked: Blocked Test


We can also configure the options such as -v, -rA, -s in our pytest.ini file as well.

[pytest]
markers = 
    smoke: Smoke Test
    regression: Regression Test
    sanity: Sanity Test
    blocked: Blocked Test
    integration: Integration Test

addopts = -rA -v

We can also add more markers to a test function and call them using and function as:

pytest -m "smoke and login" --> will run test cases with smoke AND login markers

pytest -m "smoke and not integration" 		similarly
pytest -m "smoke or integration"
pytest -m "not smoke"

pytest -m "smoke and not integration" my_test/test_markers_group.py

we can also declare the pytest markers at global level to apply it to all the test functions

pytestmark = pytest.mark.regression      --> for a single marker
pytestmark = [pytest.mark.regression, pytest.mark.sanity]   --> for multiple markers

now if we do pytest --markers we can see all the built in markers along with our own custom markers as well.

pytest allows us to set more that one fixture for a test function

def fixture(
    fixture_function: None = ...,
    *,
    scope: _ScopeName | ((str, Config) -> _ScopeName) = ...,
    params: Iterable[object] | None = ...,
    autouse: bool = ...,
    ids: Sequence[object | None] | ((Any) -> (object | None)) | None = ...,
    name: str | None = None
) -> FixtureFunctionMarker

pytest.fixture(autouse=True)

we also set scope for a particular fixture.

pytest.fixture(scope="module")

class, function, module, package, session,x


test_1one.py  --> will be picked first -- number first


test_apple --> then, in alphabetical order
test_banana --> 

**********************************

fixtures can be centralized via conftest.py

@pytest.fixture
def int_list():
    return [1, 2, 3]

The above is a fixture function,that return list of integers.

Here’s an example of a test function that uses the int_list fixture:

def test_sum(int_list):
    assert sum(int_list) == 6


Pytest will automatically pick up our hook from conftest.py much like it would with fixtures.

Usually, if you're in doubt whether to use fixtures or hooks, 
use fixtures. Hooks are for altering the framework itself, not for test related stuff.


Pytest hooks are to modify the behavior of pytest like modify the test collection strategy, test execution order etc. Fixtures are meant to set up the tests before they are executed, e.g. setting up db, initialize an app, etc.


***---> The yeild keyword is used in python generator to create ierable objects


































