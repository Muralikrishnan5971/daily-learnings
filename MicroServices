

 WEB SERVICE - W3C Definition

 A software system designed to support INTEROPERABLE, MACHINE TO MACHINE, INTRACTION OVER A NETWORK. 

 Interoberable meaning - platform independant  

                Request
               ---------------->
              /                 \
 		Application A        Webservice
 			  \                 /
 			   <----------------
 			   Response

 how does the application knows what request to send, where to send it and what is the format for the response ?
 The solution to that is Service Definition. Every webservice offers a Service Definition. 

 A Serice Definition would sepecify the following things. (WADL formats, SWAGGER and etc.  )

 1. Request/Response format
 2. Request structure
 3. Response structure
 4. Endpoint  

 There are two popular way the web service is transported over the network.
 Transport indicates, whether the service is exposed over the queue or over the network
 1. http via url
 2. mq via messeaging queue

 The most important Abstraction in REST is something called a RESOURCE. 
 A resource is anything we'd want to expose to the outside world through our application.

 For example if we take a TO-DO Management App, 
 The users are a resource, What are the to-dos can be resource, A specific to-do is a resource, A list of to-dos is also a resource.
 When we are talking of developing a restful services, we are always talking about resources. What are the resources in my application.

 What we do is, we would assign a URI to the resource.  

 A Resource has an URI (Uniform Resource Identifier)

 /Users/Murali/todo/1
 /Users/Murali/todos
 /Users/Murali

 REST does not worry about how we are representing our resources. Our resources can have different representations
 JSON, XML, HTML


start.spring.io

fill details, add dependancies, click generate. zip file is downloaded. setting up a spring project.

Main goals of Spring Boot

-> Build quickly
	- Spring initializr
	- Spring boot starter projects
	- Spring boot Auto Configurations
	- Spring boot DevTools
-> Be Production Ready
	- Logging
	- Different configurations for different environments (like Stage, PreProd, QA etc)
		Profiles, ConfigurationProperties
	- Monitoring (Spring Boot Actuator)

Now why do we need to restart the manual for every code change ? here comes the Spring boot dev tools
add the spring boot devtols dependency to pom.xml, then it restarts the server everytime there's a code change.


**** Whenever we make any changes to the pom.xml, we need to restart the server manually.

Managing Application configuration using Profiles
-------------------------------------------------

Application in different environments like stage, tst, prod, need different configurations like different database, different web services,  

example, the dev env needs to be talking to dev db, the stage env should be talking to stage db. This can be handles using profiles.

Profiles enables you to provide environment specific configurations.

When the application is not using any profiles, it uses the default application.properties


* Simplified deployemnt with Spring boot Embedded servers








































