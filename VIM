
vi dummy.py

:q!      -> quit without saving
:w
:wq
:!ls     -> execute terminal commands

i   - insert in INSERT mode
a   - append in INSERT mode
o   - goes to new line below in in INSERT mode

I   - goes beginning of line
A   - goes to the end of the line
O   - goes to new line above

To see line numbers

:set numbers

pressing numbers - to repeat actions

example: press 4 + k  -> goes four lines up

set relativenumber

colorscheme murphy

:wq

open vi again, now all settings are gone

When opened --> NORMAL mode

INSERT mode

VISUAL mode

Visual Mode is probably used a little less than the first two modes mentioned, but can still be extremely useful. 
It’s mostly used to highlight blocks of text, and then perform a command on the entire block. For example, 
you maybe highlight a block and indent the entire thing.

COMMAND mode

Commands are essential for Vim, and will be used heavily, 
especially when we get to plugins. Commands, as we’ll see, make Vim do something. 
To enter a command you simply type : while in Normal Mode and then the command.

https://medium.com/analytics-vidhya/vim-for-developers-part-1-the-basics-663619ca122a

.vimrc:

.vimrc is the configuration file used by the Vim text editor.
Vim is a popular, classic text editor and the predecessor of Neovim.
The .vimrc file is written in Vimscript, a scripting language specific to Vim.
init.vim:

init.vim is the configuration file used by the Neovim text editor.
Neovim is a modern fork of Vim, designed to improve upon and extend Vim's capabilities.
The init.vim file can be written in either Vimscript or Lua, as Neovim introduced support for Lua starting from version 0.5.

In general, vi commands:
• Are case-sensitive (uppercase and lowercase keystrokes mean different things; I is
different from i).
• Are not shown (or “echoed”) on the screen when you type them.
• Do not require an ENTER after the command.

You can use vi to edit any text file. vi copies the file to be edited into a buffer (an area
temporarily set aside in memory), displays the buffer (though you can see only one
screenful at a time), and lets you add, delete, and change text. When you save your
edits, vi copies the edited buffer back into a permanent file, replacing the old file of the
same name. Remember that you are always working on a copy of your file in the buffer,
and that your edits will not affect your original file until you save the buffer. Saving
your edits is also called “writing the buffer,” or more commonly, “writing your file.”

(A newline character is inserted into the file when you press the ENTER key in insert
mode.) If you type 200 characters before pressing ENTER, vi regards all 200 characters
as a single line (even though those 200 characters visibly take up several lines on the
screen).

Modal Editing - change the meaning of keys in each mode of operation 
Normal mode - navigate the structure of the file
Insert mode - editing the file
Visual mode - highlight portions of the file to manipulate at once
EX mode or Command mode - to execute command


VIM COMMANDS
------------

ZZ ---> quit and save
h  ---> Left, one space
j  ---> Down, one line
k  ---> Up, one line
l  ---> Right, one space

we multiply commands using numeric arguments

4l ---> similar to pressing llll --> moves four spaces to left. 

0 ---> move to beginning of the line
$ ---> move to the end of the line.
w ---> move the cursor forward one word at a time, counting symbols and punctuation as equivalent to words
W ---> move forward by word, not counting symbols and punctuation
b ---> move the cursor back one word at a time, counting symbols and punctuation as equivalent to words
B ---> move back by word, not counting symbols and punctuation

10w ---> moves forward cursor by 10 words

G ---> goes to the end of the file
1G ---> goes to the beginning of the file
i ---> enter text before the cursor (insert)
a ---> enter text after the cursor (append)

Change commands has the following pattern (command)(text object)
ex: command is the change command c, and text object is a movement command.

c ---> change command
d ---> delete command
y ---> yank (copy) command
p ---> put (paste) command

dw ---> deletes the word
d2w ---> deltes two words

Here’s how this works. Number and command are optional. Without them, you simply have a movement command. 
If you add a number, you have a multiple movement. On the other hand, combine a command (c, d, or y) with a text object to get an editing
command. When you realize how many combinations are possible in this way, vi becomes a powerful editor indeed!

cc ---> special change command --> To replace the entire current line with any amount of text entered before pressing ESC
c$ ---> changes the line from the cursor to the end of the line.
C  ---> does exactly the same as the above command
rW ---> replacement command, replaces the cursor character with W, without going to insert mode.
s  ---> substitute command deletes the cursor character, and goes to insert mode
S  ---> substitute command deletes entire line and goes to insert mode.
~  ---> changes the case of the cursor character
dd ---> delete a line
.  ---> Any time you make the same editing command over and over, you can save time by duplicating it with the repeat command, the period (.)

50i*ESC ---> inserts a line of 50 *
50a--ESC ---> appends 50 --

Editing action Command
Insert text at current position              ---> i
Insert text at beginning of line             ---> I
Append text at current position              ---> a
Append text at beginning of line             ---> A
Open new line below cursor for new text      ---> o
Open new line above cursor for new text      ---> O
Delete line and substitute text              ---> S
Overstrike existing characters with new text ---> R
Join current and next line                   ---> J
Toggle case                                  ---> ~
Repeat last action                           ---> .
Undo last change u
Restore line to original state U

MOVING AROUND
-------------

Scrolling the Screen
********************p
Ctrl+ F ---> scroll forward one screen
Ctrl+ B ---> scroll backward one screen
Ctrl+ D ---> scroll forward half screen (down)
Ctrl+ U ---> scroll backward half screen (up)

Repositioning the screen
************************
If you want to scroll the screen up or down, but you want the cursor to remain
on the line where you left it, use the z command.

z + ENTER ---> Move current line to top of screen and scroll.
z + .     ---> Move current line to center of screen and scroll.
z + -     ---> Move current line to bottom of screen and scroll

z also takes numeric prefixes
200z + ENTER moves line 200 to the top of the screen.

gg   ---> Move to top of the file
G    ---> Move to bottom of the file



page 59

EX COMMANDS
-----------
:w  ---> to save (write) your file but not quit vi
:q  ---> to quit if you haven’t made any edits
:wq ---> write and quit vi
:e! ---> wipe out all of the edits you have made in a session and then return to the original file (without exiting vi)
:q! ---> wipe out all your edits and then just quit vi
:sh ---> You can create a shell by typing :sh; type CTRL-D or exit to terminate the shell and return to vi.


{command}{text object or motion}
example:
dw  	---> delete word ---> deletes from cursor to end of the word
diw 	---> delete in word ---> deletes the entire word the cursor is present
caw 	---> deletes entire word the cursor is in, and enters INSERT mode
yi) 	---> yank all text inside parantheses
da]     ---> delete all text including parentheses

The syntax of the language is broken down into verbs and nouns, operations and text that you want to operate on.

***** verb + noun ******

d for delete + w + word

:dw --->  deletes a word

Verbs in vim
------------
d ---> delete
c ---> change (deletes and enters insert mode)
> ---> indent
v ---> visually select
y ---> yank (copy)

Nouns in Vim (Motion)
---------------------
w ---> word (forward by a word)
b ---> back (back by a word)

2j ---> down twice

Nouns in Vim (Text Objects)
---------------------------
iw ---> inner word (works anywhere from the word)
it ---> inner tag
i" ---> inner qoutes
ip ---> inner paragraph

diw ---> deletes the word, the cursor is in
dip ---> deletes the paragraph the cursor is in


:read !ls   ---> reads the output of the command into the buffer
:term       ---> opens horizontal terminal inside vim
:vert term  ---> opens vertical terminal inside vim


master guide --> https://www.freecodecamp.org/news/vimrc-configuration-guide-customize-your-vim-editor/


By default  vim will not allow you to switch buffers, unless that buffer is fully written and then unloaded.

:buffers    ---> lists all open buffers
:ls         ---> does the same
:bp         ---> buffer previous --- moves to previous buffer
:bn         ---> buffer next   --- moves to next buffer
:bd         ---> buffer delete


:e!         ----> clear all unsaved changes











